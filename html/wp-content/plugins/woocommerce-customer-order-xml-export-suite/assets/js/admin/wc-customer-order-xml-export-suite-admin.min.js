/**
 * WooCommerce Customer/Order XML Export Suite Admin scripts
 *
 * @since 1.0.0
 */

(function() {
  jQuery(document).ready(function($) {
    'use strict';
    var $mapping, $settings, ExportModalView, add_mapping_row, apply_format_settings, dismiss_notice, handle_export, opts, remove_mapping_rows, running_intervals, serializeObject, show_modal, timedChunk;
    running_intervals = {};

    /**
    	 * Export Modal View, extended for compatibility with WC < 2.6,
    	 * backporting template variables support for modal templates.
    	 * Extended properties and methods are copypasta from backbone-modal.js from WC 2.6
    	 *
    	 * TODO: remove the compatibility layer when dropping support for WC < 2.6 {IT 2016-08-03}
    	 *
    	 * @since 1.8.1-1
     */
    if (wc_customer_order_xml_export_suite_admin.is_wc_version_lt_2_6) {
      ExportModalView = $.WCBackboneModal.View.extend({
        events: {
          'click .modal-close': 'closeButton',
          'click #btn-ok': 'addButton',
          'touchstart #btn-ok': 'addButton',
          'keydown': 'keyboardActions'
        },
        resizeContent: function() {
          var $content, max_h;
          $content = $('.wc-backbone-modal-content').find('article');
          max_h = $(window).height() * 0.75;
          return $content.css({
            'max-height': max_h + 'px'
          });
        },
        initialize: function(data) {
          var view;
          view = this;
          this._target = data.target;
          this._string = data.string;
          _.bindAll(this, 'render');
          this.render();
          $('.wc-backbone-modal-content').css({
            'transform': 'translate(-50%, -50%)'
          });
          return $(window).resize(function() {
            return view.resizeContent();
          });
        },
        render: function() {
          var template;
          template = wp.template(this._target);
          this.$el.attr('tabindex', '0').append(template(this._string));
          $(document.body).css('overflow', 'hidden').append(this.$el);
          this.resizeContent();
          return $(document.body).trigger('wc_backbone_modal_loaded', this._target);
        }
      });
    } else {
      ExportModalView = $.WCBackboneModal.View;
    }

    /**
    	 * Process an array of data without blocking the UI
    	 *
    	 * See https://gist.github.com/rviscomi/3642608
    	 *
    	 * @since 1.8.1-1
     */
    timedChunk = function(items, process, context, callback, delay, maxItems) {
      var chunkTimer, i, n;
      n = items.length;
      delay = delay || 25;
      maxItems = maxItems || n;
      i = 0;
      chunkTimer = function() {
        var j, start;
        start = +(new Date);
        j = i;
        while (i < n && i - j < maxItems && new Date - start < 50) {
          process.call(context, items[i]);
          i += 1;
        }
        if (i < n) {
          return setTimeout(chunkTimer, delay);
        } else {
          return callback(items);
        }
      };
      return setTimeout(chunkTimer, 25);
    };

    /**
    	 * Serialize a form to JS object
    	 *
    	 * Based on https://github.com/hongymagic/jQuery.serializeObject
    	 *
    	 * @since 1.8.1-1
    	 * @param {object} el Form object to serialize data for
    	 * @return {object} Form data
     */
    serializeObject = function(el) {
      var extend, result;
      result = {};
      extend = function(i, element) {
        var node;
        element.name = element.name.replace('[]', '');
        node = result[element.name];
        if ('undefined' !== typeof node && node !== null) {
          if ($.isArray(node)) {
            node.push(element.value);
          } else {
            result[element.name] = [node, element.value];
          }
        } else {
          result[element.name] = element.value;
        }
      };
      $.each($(el).serializeArray(), extend);
      return result;
    };

    /**
    	 * Show a modal, closing any previously open modals
    	 *
    	 * @since 1.8.1-1
    	 * @param {object} template_data Data for the modal template
     */
    show_modal = function(template_data) {
      $('#wc-backbone-modal-dialog .modal-close').trigger('click');
      template_data.button_class = template_data.button_class || '';
      return new ExportModalView({
        target: 'wc-customer-order-xml-export-suite-modal',
        string: template_data
      });
    };

    /**
    	 * Kick off an export
    	 *
    	 * @since 1.8.1-1
    	 * @param {object} query Export query to send to backend
    	 * @param {string} export_type Optional. Export type, such as 'orders' or `customers`. Defaults to `orders`
    	 * @param {string} export_method Optional. Export method, such as 'download', 'ftp', etc.
     */
    handle_export = function(query, export_type, export_method) {
      var data, template;
      data = {
        action: 'wc_customer_order_xml_export_suite_create_export',
        security: wc_customer_order_xml_export_suite_admin.create_export_nonce,
        export_type: export_type || 'orders',
        export_query: query,
        export_method: export_method || 'download'
      };
      template = wp.template('wc-customer-order-xml-export-suite-modal-body-export-started');
      show_modal({
        title: wc_customer_order_xml_export_suite_admin.i18n.export_started,
        body: template({
          export_method: export_method
        }),
        action: wc_customer_order_xml_export_suite_admin.i18n.close
      });
      return $.post(ajaxurl, data).done(function(response) {
        var running;
        if (!$('#wc-backbone-modal-dialog').length) {
          return;
        }
        if (false === response.success) {
          return show_modal({
            title: response.data.title,
            body: '<p><span class="dashicons dashicons-warning"></span> ' + response.data.message + '</p>',
            action: wc_customer_order_xml_export_suite_admin.i18n.close
          });
        }
        $('#wc-backbone-modal-dialog').addClass('wc-customer-order-xml-export-suite-' + response.export_id).data('wc-customer-order-xml-export-suite-id', response.export_id);
        running = false;
        return running_intervals[response.export_id] = setInterval(function() {
          if (running) {
            return;
          }
          running = true;
          return $.get(response.status_url).done(function(res) {
            if ('string' === typeof res) {
              return show_modal({
                title: wc_customer_order_xml_export_suite_admin.i18n.unexpected_error,
                body: '<p><span class="dashicons dashicons-warning"></span> ' + wc_customer_order_xml_export_suite_admin.i18n.unexpected_error_message + '</p>',
                action: wc_customer_order_xml_export_suite_admin.i18n.close
              });
            }
            running = false;
            if (false === res.success) {
              show_modal({
                title: res.data.title,
                body: '<p><span class="dashicons dashicons-warning"></span> ' + res.data.message + '</p>',
                action: wc_customer_order_xml_export_suite_admin.i18n.close
              });
              dismiss_notice(response.export_id);
            }
            if ('completed' === res.status) {
              if ('download' === res.method || 'local' === res.method || 'completed' === res.transfer_status) {
                template = wp.template('wc-customer-order-xml-export-suite-modal-body-export-completed');
                show_modal({
                  title: wc_customer_order_xml_export_suite_admin.i18n.export_completed,
                  body: template({
                    export_method: export_method,
                    download_url: res.download_url
                  }),
                  action: wc_customer_order_xml_export_suite_admin.i18n.done
                });
                if ('download' === export_method) {
                  window.location.href = res.download_url;
                }
                return dismiss_notice(response.export_id);
              }
            }
          }).fail(function(jqXHR, textStatus, error) {
            return show_modal({
              title: wc_customer_order_xml_export_suite_admin.i18n.unexpected_error,
              body: '<p><span class="dashicons dashicons-warning"></span> ' + wc_customer_order_xml_export_suite_admin.i18n.unexpected_error_message + '</p>',
              action: wc_customer_order_xml_export_suite_admin.i18n.close
            });
          });
        }, 2000);
      }).fail(function(jqXHR, textStatus, error) {
        return show_modal({
          title: wc_customer_order_xml_export_suite_admin.i18n.unexpected_error,
          body: '<p><span class="dashicons dashicons-warning"></span> ' + wc_customer_order_xml_export_suite_admin.i18n.unexpected_error_message + '</p>',
          action: wc_customer_order_xml_export_suite_admin.i18n.close
        });
      });
    };

    /**
    	 * Dismiss export finished (either completed or failed) notice
    	 *
    	 * @since 1.8.1-1
    	 * @param {string} export_id
     */
    dismiss_notice = function(export_id) {
      return $.get(ajaxurl, {
        action: 'wc_plugin_framework_customer_order_xml_export_suite_dismiss_notice',
        messageid: 'wc_customer_order_xml_export_suite_finished_' + export_id
      });
    };

    /* Plugin Admin Pages */
    if ('woocommerce_page_wc_customer_order_xml_export_suite' === pagenow) {
      if ('export' === wc_customer_order_xml_export_suite_admin.current_tab) {
        opts = {
          dateFormat: 'yy-mm-dd',
          numberOfMonths: 1,
          showButtonPanel: true,
          showOn: 'button',
          buttonImage: wc_customer_order_xml_export_suite_admin.calendar_icon_url,
          buttonImageOnly: true
        };
        $('#start_date').datepicker(opts);
        $('#end_date').datepicker(opts);
        $('input[name=type]').change(function() {
          var $show_if_orders;
          $show_if_orders = $('.show_if_orders').closest('tr').add($('#subscription_orders').closest('table.form-table')).add($('#subscription_orders').closest('table.form-table').prev('h2'));
          if ('customers' === $(this).val()) {
            return $show_if_orders.hide();
          } else {
            return $show_if_orders.show();
          }
        });
        $('#mainform').submit(function(e) {
          var export_type, query;
          e.preventDefault();
          query = serializeObject(this);
          export_type = query.type;
          delete query.type;
          return handle_export(query, export_type, 'download');
        });
      }
      if ('export_list' === wc_customer_order_xml_export_suite_admin.current_tab) {
        $('.file_actions').find('.delete').on('click', function(e) {
          if (!confirm(wc_customer_order_xml_export_suite_admin.i18n.confirm_export_delete)) {
            return e.preventDefault();
          }
        });
        $('.file_actions').find('.cancel').on('click', function(e) {
          if (!confirm(wc_customer_order_xml_export_suite_admin.i18n.confirm_export_cancel)) {
            return e.preventDefault();
          }
        });
        $('.file_actions').find('.transfer, .email').on('click', function(e) {
          if (!confirm(wc_customer_order_xml_export_suite_admin.i18n.confirm_export_transfer)) {
            return e.preventDefault();
          }
        });
      }
      if ('settings' === wc_customer_order_xml_export_suite_admin.current_tab) {
        $settings = {
          ftp: $('.js-auto-export-ftp-field:first').closest('table'),
          http_post: $('.js-auto-export-http-post-field:first').closest('table'),
          email: $('.js-auto-export-email-field:first').closest('table')
        };
        $('.js-auto-export-trigger').change(function() {
          var $schedule_settings, trigger;
          trigger = $(this).val();
          $schedule_settings = $('.js-auto-export-schedule-field').closest('tr');
          if ('immediate' === trigger) {
            return $schedule_settings.hide();
          } else {
            return $schedule_settings.show();
          }
        }).change();
        $('.js-auto-export-method').change(function() {
          var $auto_export_settings, export_method;
          export_method = $(this).val();
          $auto_export_settings = $(this).closest('tr').nextUntil('h3');
          if ('disabled' === export_method) {
            $auto_export_settings.hide();
          } else {
            $auto_export_settings.show();
            $('.js-auto-export-trigger').change();
          }
          if ('local' === export_method) {
            $(this).next('span.description').show();
          } else {
            $(this).next('span.description').hide();
          }
          return $.each($settings, function(method, $el) {
            var action;
            action = method === export_method ? 'show' : 'hide';
            return $el[action]().prev()[action]();
          });
        }).change();
        $('.js-auto-export-timepicker').timepicker({
          'step': 5
        });
        $('select.js-auto-export-ftp-security').change(function() {
          var $ftp_port, $port, $security;
          $ftp_port = $('.js-auto-export-ftp-port');
          $port = Number($ftp_port.val(), 10);
          $security = $(this).val();
          if ('' === $port || [21, 22, 990].indexOf($port) > -1) {
            if ('sftp' === $security) {
              return $ftp_port.val(22);
            } else if ('ftp_ssl' === $security) {
              return $ftp_port.val(990);
            } else {
              return $ftp_port.val(21);
            }
          }
        }).change();
        $('.js-auto-export-test-button').on('click', function() {
          return $('<input>').attr({
            type: 'hidden',
            id: 'wc_customer_order_xml_export_suite_test_method',
            name: 'wc_customer_order_xml_export_suite_test_method',
            value: $(this).data('method')
          }).appendTo('.woocommerce form');
        });
      }
      if ('custom_formats' === wc_customer_order_xml_export_suite_admin.current_tab) {
        $mapping = $('.wc-customer-order-xml-export-suite-field-mapping');

        /**
        			 * Add a mapping row
        			 *
        			 * @since 1.8.1-1
        			 * @param {object} options Optional. mapping options to set on the row
         */
        add_mapping_row = function(options, enhance_select) {
          var $newRow, $templateRow, index;
          if (options == null) {
            options = {};
          }
          if (enhance_select == null) {
            enhance_select = false;
          }
          $templateRow = $mapping.find('.field-mapping-__INDEX__');
          index = $mapping.find('tbody tr').length - 1;
          $newRow = $($templateRow.prop('outerHTML').replace(/__INDEX__/g, index));
          $newRow.find('.enhanced').removeClass('enhanced');
          if (options.key) {
            $newRow.find('.js-field-key').val(options.key);
            if ('meta' === options.key) {
              $newRow.find('.js-field-meta-key-label').show();
              if (options.meta_key) {
                $newRow.find('.js-field-meta-key').val(options.meta_key);
              }
            }
          }
          if (options.name) {
            $newRow.find('.js-field-name').val(options.name);
          }
          $templateRow.before($newRow);
          $mapping.find('.no-field-mappings').addClass('hide');
          $mapping.find('tfoot .js-remove-field-mapping').removeClass('hide');
          if (enhance_select) {
            return $(document.body).trigger('wc-enhanced-select-init');
          }
        };

        /**
        			 * Remove mapping rows
        			 *
        			 * @since 1.8.1-1
        			 * @param {object}|{string} selector jquery-compatible selector or jQuery object
        			 * @param {number|boolean} fadeOut fadeOut time or false if fadeout should be disabled
         */
        remove_mapping_rows = function(selector, fadeOut) {
          var toggle_placeholder;
          if (fadeOut == null) {
            fadeOut = 400;
          }
          toggle_placeholder = function() {
            if ($mapping.find('tbody tr:visible').length < 1) {
              $mapping.find('.no-field-mappings').removeClass('hide');
              $mapping.find('.js-remove-field-mapping').addClass('hide');
            }
            return $mapping.find('th.check-column input[type="checkbox"]').removeAttr('checked');
          };
          if (!fadeOut) {
            $(selector).closest('tr.field-mapping').remove();
            return toggle_placeholder();
          } else {
            return $.when($(selector).closest('tr.field-mapping').fadeOut(fadeOut, function() {
              var $row;
              $row = $(this);
              return setTimeout(function() {
                return $row.remove();
              }, 1);
            })).then(function() {
              return toggle_placeholder();
            });
          }
        };

        /**
        			 * Apply format settings
        			 *
        			 * @since 1.8.1-1
        			 * @param {object} settings settings to apply
         */
        apply_format_settings = function(settings) {
          $('.wc-customer-order-xml-export-suite-field-mapping').block({
            message: null,
            overlayCSS: {
              background: '#fff',
              opacity: 0.6
            }
          });
          return setTimeout(function() {
            var fields;
            settings = typeof settings === 'string' ? JSON.parse(settings) : settings;
            $('.js-include-all-meta').prop('checked', true === settings.include_all_meta);
            if (settings.indent) {
              $('.js-delimiter').prop('checked', true === settings.indent);
            }
            if (settings.xml_version) {
              $('.js-xml-version').select2('val', settings.xml_version, true);
            }
            if (settings.xml_ending) {
              $('.js-xml-encoding').val(settings.xml_encoding);
            }
            if (settings.xml_standalone) {
              $('.js-xml-standalone').prop('checked', true === settings.xml_standalone);
            }
            remove_mapping_rows($mapping.find('tbody tr.field-mapping:not(.field-mapping-__INDEX__)'), false);
            fields = $.map(settings.fields, function(options, key) {
              if ('string' === typeof options) {
                options = {
                  name: options
                };
              }
              if (!options.key) {
                options.key = key;
              }
              return options;
            });
            return timedChunk(fields, add_mapping_row, this, function() {
              $(document.body).trigger('wc-enhanced-select-init');
              return $('.wc-customer-order-xml-export-suite-field-mapping').unblock();
            });
          }, 1);
        };
        $mapping.find('.js-add-field-mapping').click(function(e) {
          e.preventDefault();
          return add_mapping_row(null, true);
        });
        $mapping.find('.js-remove-field-mapping').click(function(e) {
          var $remove;
          e.preventDefault();
          $remove = $mapping.find('tbody input[type="checkbox"]:checked');
          return remove_mapping_rows($remove);
        });
        $mapping.find('.js-load-mapping').click(function(e) {
          e.preventDefault();
          return show_modal({
            title: wc_customer_order_xml_export_suite_admin.i18n.load_mapping,
            body: $('#tmpl-wc-customer-order-xml-export-suite-modal-body-load-mapping').html(),
            action: wc_customer_order_xml_export_suite_admin.i18n.load,
            button_class: 'button-primary'
          });
        });
        $(document.body).on('change', '#load-mapping-source', function(e) {
          var source;
          source = $(e.target).val();
          if ('snippet' === source) {
            return $('#load-mapping-snippet').show();
          } else {
            return $('#load-mapping-snippet').hide();
          }
        });
        $(document.body).on('wc_backbone_modal_response', function(event, target, posted_data) {
          var settings;
          if ('snippet' === posted_data.source) {
            settings = posted_data.snippet ? JSON.parse(posted_data.snippet) : {
              fields: {}
            };
          } else {
            settings = wc_customer_order_xml_export_suite_admin.export_formats[posted_data.source];
          }
          return setTimeout(function() {
            return apply_format_settings(settings);
          }, 1);
        });
        $mapping.find('tbody').sortable({
          items: 'tr',
          cursor: 'move',
          axis: 'y',
          handle: 'td.sort',
          scrollSensitivity: 40
        });
        $mapping.on('change', 'select.js-field-key', function(e) {
          var $el, $name, value;
          $el = $(e.target);
          $name = $el.closest('tr').find('.js-field-name');
          if ('meta' === $el.val()) {
            $el.closest('td').find('.js-field-meta-key-label').removeClass('hide').find('input').focus();
          } else {
            $el.closest('td').find('.js-field-meta-key-label').addClass('hide').find('input').val('');
          }
          if (!$name.val() || e.removed && e.removed.id === $name.val()) {
            value = 'meta' === $el.val() ? '' : $el.val();
            return $name.val(value);
          }
        });
        $('#mainform').submit(function(e) {
          return $('tr.field-mapping-__INDEX__').remove();
        });
      }
    }

    /* Orders List screen */
    if ('edit-shop_order' === pagenow) {
      $('#posts-filter input[type="submit"].action').on('click', function(e) {
        var action, export_ids, export_method;
        action = $(e.target).prev('select').val();
        if ('download_to_xml' === action || 'export_to_xml_via_auto_export_method' === action) {
          e.preventDefault();
          export_method = 'download_to_xml' === action ? 'download' : 'auto_export';
          export_ids = $.map($('#posts-filter').find('input[name="post[]"]:checked'), function(el) {
            return Number($(el).val(), 10);
          });
          return handle_export({
            ids: export_ids
          }, 'orders', export_method);
        }
      });
      $('.order_actions .download_to_xml').on('click', function(e) {
        var export_ids;
        e.preventDefault();
        export_ids = $(this).closest('tr').find('th input[name="post[]"]').val();
        return handle_export({
          ids: export_ids
        }, 'orders', 'download');
      });
    }

    /* Edit Order screen */
    if ('shop_order' === pagenow) {
      $('form#post').submit(function(e) {
        var action, export_ids, export_method;
        action = $(this).find('select[name="wc_order_action"]').val();
        if (!action) {
          return;
        }
        if (['wc_customer_order_xml_export_suite_download', 'wc_customer_order_xml_export_suite_via_auto_export_method'].indexOf(action) === -1) {
          return;
        }
        e.preventDefault();
        export_method = 'wc_customer_order_xml_export_suite_download' === action ? 'download' : 'auto_export';
        export_ids = [woocommerce_admin_meta_boxes.post_id];
        return handle_export({
          ids: export_ids
        }, 'orders', export_method);
      });
    }
    return $('body').on('wc_backbone_modal_before_remove', function(target) {
      var export_id;
      export_id = $('#wc-backbone-modal-dialog').data('wc-customer-order-xml-export-suite-id');
      if (export_id && running_intervals[export_id]) {
        return clearInterval(running_intervals[export_id]);
      }
    });
  });

}).call(this);


